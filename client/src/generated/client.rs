//! Turnkey Client to interact with the Turnkey API
//! See <https://docs.turnkey.com>
use crate::TurnkeyClient;
use crate::generated::services::coordinator::public::v1::{GetSubOrgIdsRequest,
  GetWalletsRequest,
  GetWalletsResponse,
  GetApiKeysRequest,
  GetOrganizationConfigsResponse,
  GetVerifiedSubOrgIdsResponse,
  GetPrivateKeysRequest,
  GetOauthProvidersResponse,
  GetActivityRequest,
  GetActivitiesResponse,
  GetOauthProvidersRequest,
  GetApiKeysResponse,
  GetVerifiedSubOrgIdsRequest,
  GetAuthenticatorResponse,
  GetUsersResponse,
  GetOrganizationConfigsRequest,
  GetApiKeyRequest,
  GetAuthenticatorsResponse,
  GetWhoamiRequest,
  GetPoliciesResponse,
  GetWhoamiResponse,
  GetUserResponse,
  GetUsersRequest,
  GetPrivateKeyRequest,
  GetPrivateKeyResponse,
  GetPrivateKeysResponse,
  GetAuthenticatorsRequest,
  GetWalletRequest,
  GetPoliciesRequest,
  ListUserTagsRequest,
  ActivityResponse,
  GetApiKeyResponse,
  GetWalletResponse,
  ListUserTagsResponse,
  GetWalletAccountRequest,
  GetWalletAccountsResponse,
  GetPolicyRequest,
  GetWalletAccountResponse,
  GetSubOrgIdsResponse,
  GetActivitiesRequest,
  ListPrivateKeyTagsRequest,
  GetPolicyResponse,
  ListPrivateKeyTagsResponse,
  GetWalletAccountsRequest,
  GetAuthenticatorRequest,
  GetUserRequest};
use crate::generated::external::activity::v1::{UpdatePrivateKeyTagRequest,
  SignRawPayloadsRequest,
  UpdatePolicyRequest,
  CreateReadWriteSessionRequest,
  OauthRequest,
  CreateAuthenticatorsRequest,
  RejectActivityRequest,
  SignTransactionRequest,
  DeleteInvitationRequest,
  DeletePolicyRequest,
  RecoverUserRequest,
  DeletePrivateKeyTagsRequest,
  ExportWalletAccountRequest,
  DeleteUsersRequest,
  SetOrganizationFeatureRequest,
  DeleteUserTagsRequest,
  InitImportWalletRequest,
  InitImportPrivateKeyRequest,
  CreatePolicyRequest,
  InitOtpAuthRequest,
  CreateReadOnlySessionRequest,
  CreatePoliciesRequest,
  CreateUsersRequest,
  OtpAuthRequest,
  CreateOauthProvidersRequest,
  UpdateRootQuorumRequest,
  CreateSubOrganizationRequest,
  DeleteSubOrganizationRequest,
  UpdateUserTagRequest,
  ApproveActivityRequest,
  CreatePrivateKeysRequest,
  DeleteAuthenticatorsRequest,
  SignRawPayloadRequest,
  ExportWalletRequest,
  CreateUserTagRequest,
  DeleteOauthProvidersRequest,
  CreateApiKeysRequest,
  DeleteWalletsRequest,
  CreateInvitationsRequest,
  CreatePrivateKeyTagRequest,
  CreateWalletAccountsRequest,
  RemoveOrganizationFeatureRequest,
  DeletePrivateKeysRequest,
  InitUserEmailRecoveryRequest,
  EmailAuthRequest,
  DeleteApiKeysRequest,
  ImportWalletRequest,
  ImportPrivateKeyRequest,
  ExportPrivateKeyRequest,
  UpdateWalletRequest,
  CreateWalletRequest,
  UpdateUserRequest};

use reqwest;
use tkhq_api_key_stamper::TurnkeyApiKey;
use tkhq_api_key_stamper::{stamp,TurnkeyApiKey};

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This client is autogenerated. Please do not edit it manually
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

impl TurnkeyClient {
    pub async fn get_whoami(client: &reqwest::Client, base_url: &str, request: GetWhoamiRequest, stamp: &str) -> Result<GetWhoamiResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/whoami");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetWhoamiResponse>().await?;
    Ok(parsed)
}
pub async fn get_sub_org_ids(client: &reqwest::Client, base_url: &str, request: GetSubOrgIdsRequest, stamp: &str) -> Result<GetSubOrgIdsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_suborgs");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetSubOrgIdsResponse>().await?;
    Ok(parsed)
}
pub async fn get_verified_sub_org_ids(client: &reqwest::Client, base_url: &str, request: GetVerifiedSubOrgIdsRequest, stamp: &str) -> Result<GetVerifiedSubOrgIdsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_verified_suborgs");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetVerifiedSubOrgIdsResponse>().await?;
    Ok(parsed)
}
pub async fn get_activity(client: &reqwest::Client, base_url: &str, request: GetActivityRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_activity");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_activities(client: &reqwest::Client, base_url: &str, request: GetActivitiesRequest, stamp: &str) -> Result<GetActivitiesResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_activities");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetActivitiesResponse>().await?;
    Ok(parsed)
}
pub async fn approve_activity(client: &reqwest::Client, base_url: &str, request: ApproveActivityRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/approve_activity");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn reject_activity(client: &reqwest::Client, base_url: &str, request: RejectActivityRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/reject_activity");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_user(client: &reqwest::Client, base_url: &str, request: GetUserRequest, stamp: &str) -> Result<GetUserResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_user");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetUserResponse>().await?;
    Ok(parsed)
}
pub async fn get_users(client: &reqwest::Client, base_url: &str, request: GetUsersRequest, stamp: &str) -> Result<GetUsersResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_users");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetUsersResponse>().await?;
    Ok(parsed)
}
pub async fn delete_users(client: &reqwest::Client, base_url: &str, request: DeleteUsersRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_users");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_policy(client: &reqwest::Client, base_url: &str, request: CreatePolicyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_policy");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_policies(client: &reqwest::Client, base_url: &str, request: CreatePoliciesRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_policies");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_policy(client: &reqwest::Client, base_url: &str, request: UpdatePolicyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_policy");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_policy(client: &reqwest::Client, base_url: &str, request: DeletePolicyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_policy");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_policies(client: &reqwest::Client, base_url: &str, request: GetPoliciesRequest, stamp: &str) -> Result<GetPoliciesResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_policies");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetPoliciesResponse>().await?;
    Ok(parsed)
}
pub async fn get_policy(client: &reqwest::Client, base_url: &str, request: GetPolicyRequest, stamp: &str) -> Result<GetPolicyResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_policy");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetPolicyResponse>().await?;
    Ok(parsed)
}
pub async fn create_read_only_session(client: &reqwest::Client, base_url: &str, request: CreateReadOnlySessionRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_read_only_session");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_read_write_session(client: &reqwest::Client, base_url: &str, request: CreateReadWriteSessionRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_read_write_session");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_private_keys(client: &reqwest::Client, base_url: &str, request: CreatePrivateKeysRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_private_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_private_key(client: &reqwest::Client, base_url: &str, request: GetPrivateKeyRequest, stamp: &str) -> Result<GetPrivateKeyResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_private_key");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetPrivateKeyResponse>().await?;
    Ok(parsed)
}
pub async fn get_private_keys(client: &reqwest::Client, base_url: &str, request: GetPrivateKeysRequest, stamp: &str) -> Result<GetPrivateKeysResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_private_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetPrivateKeysResponse>().await?;
    Ok(parsed)
}
pub async fn create_api_keys(client: &reqwest::Client, base_url: &str, request: CreateApiKeysRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_api_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_api_keys(client: &reqwest::Client, base_url: &str, request: DeleteApiKeysRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_api_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_oauth_providers(client: &reqwest::Client, base_url: &str, request: GetOauthProvidersRequest, stamp: &str) -> Result<GetOauthProvidersResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_oauth_providers");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetOauthProvidersResponse>().await?;
    Ok(parsed)
}
pub async fn get_api_keys(client: &reqwest::Client, base_url: &str, request: GetApiKeysRequest, stamp: &str) -> Result<GetApiKeysResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_api_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetApiKeysResponse>().await?;
    Ok(parsed)
}
pub async fn get_api_key(client: &reqwest::Client, base_url: &str, request: GetApiKeyRequest, stamp: &str) -> Result<GetApiKeyResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_api_key");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetApiKeyResponse>().await?;
    Ok(parsed)
}
pub async fn create_authenticators(client: &reqwest::Client, base_url: &str, request: CreateAuthenticatorsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_authenticators");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_authenticators(client: &reqwest::Client, base_url: &str, request: DeleteAuthenticatorsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_authenticators");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_authenticators(client: &reqwest::Client, base_url: &str, request: GetAuthenticatorsRequest, stamp: &str) -> Result<GetAuthenticatorsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_authenticators");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetAuthenticatorsResponse>().await?;
    Ok(parsed)
}
pub async fn get_authenticator(client: &reqwest::Client, base_url: &str, request: GetAuthenticatorRequest, stamp: &str) -> Result<GetAuthenticatorResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_authenticator");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetAuthenticatorResponse>().await?;
    Ok(parsed)
}
pub async fn create_invitations(client: &reqwest::Client, base_url: &str, request: CreateInvitationsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_invitations");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_invitation(client: &reqwest::Client, base_url: &str, request: DeleteInvitationRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_invitation");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_users(client: &reqwest::Client, base_url: &str, request: CreateUsersRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_users");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_user(client: &reqwest::Client, base_url: &str, request: UpdateUserRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_user");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_user_tag(client: &reqwest::Client, base_url: &str, request: CreateUserTagRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_user_tag");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_private_key_tag(client: &reqwest::Client, base_url: &str, request: CreatePrivateKeyTagRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_private_key_tag");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_user_tag(client: &reqwest::Client, base_url: &str, request: UpdateUserTagRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_user_tag");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn list_user_tags(client: &reqwest::Client, base_url: &str, request: ListUserTagsRequest, stamp: &str) -> Result<ListUserTagsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_user_tags");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ListUserTagsResponse>().await?;
    Ok(parsed)
}
pub async fn delete_user_tags(client: &reqwest::Client, base_url: &str, request: DeleteUserTagsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_user_tags");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_private_key_tag(client: &reqwest::Client, base_url: &str, request: UpdatePrivateKeyTagRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_private_key_tag");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn list_private_key_tags(client: &reqwest::Client, base_url: &str, request: ListPrivateKeyTagsRequest, stamp: &str) -> Result<ListPrivateKeyTagsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_private_key_tags");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ListPrivateKeyTagsResponse>().await?;
    Ok(parsed)
}
pub async fn delete_private_key_tags(client: &reqwest::Client, base_url: &str, request: DeletePrivateKeyTagsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_private_key_tags");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn sign_raw_payload(client: &reqwest::Client, base_url: &str, request: SignRawPayloadRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/sign_raw_payload");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn sign_raw_payloads(client: &reqwest::Client, base_url: &str, request: SignRawPayloadsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/sign_raw_payloads");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn sign_transaction(client: &reqwest::Client, base_url: &str, request: SignTransactionRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/sign_transaction");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_root_quorum(client: &reqwest::Client, base_url: &str, request: UpdateRootQuorumRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_root_quorum");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_wallet(client: &reqwest::Client, base_url: &str, request: CreateWalletRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_wallets(client: &reqwest::Client, base_url: &str, request: GetWalletsRequest, stamp: &str) -> Result<GetWalletsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_wallets");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetWalletsResponse>().await?;
    Ok(parsed)
}
pub async fn get_wallet(client: &reqwest::Client, base_url: &str, request: GetWalletRequest, stamp: &str) -> Result<GetWalletResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetWalletResponse>().await?;
    Ok(parsed)
}
pub async fn create_wallet_accounts(client: &reqwest::Client, base_url: &str, request: CreateWalletAccountsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_wallet_accounts");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_wallet_accounts(client: &reqwest::Client, base_url: &str, request: GetWalletAccountsRequest, stamp: &str) -> Result<GetWalletAccountsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/list_wallet_accounts");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetWalletAccountsResponse>().await?;
    Ok(parsed)
}
pub async fn get_wallet_account(client: &reqwest::Client, base_url: &str, request: GetWalletAccountRequest, stamp: &str) -> Result<GetWalletAccountResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_wallet_account");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetWalletAccountResponse>().await?;
    Ok(parsed)
}
pub async fn create_sub_organization(client: &reqwest::Client, base_url: &str, request: CreateSubOrganizationRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_sub_organization");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn init_user_email_recovery(client: &reqwest::Client, base_url: &str, request: InitUserEmailRecoveryRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/init_user_email_recovery");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn recover_user(client: &reqwest::Client, base_url: &str, request: RecoverUserRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/recover_user");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn set_organization_feature(client: &reqwest::Client, base_url: &str, request: SetOrganizationFeatureRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/set_organization_feature");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn remove_organization_feature(client: &reqwest::Client, base_url: &str, request: RemoveOrganizationFeatureRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/remove_organization_feature");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn export_private_key(client: &reqwest::Client, base_url: &str, request: ExportPrivateKeyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/export_private_key");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn export_wallet(client: &reqwest::Client, base_url: &str, request: ExportWalletRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/export_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn email_auth(client: &reqwest::Client, base_url: &str, request: EmailAuthRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/email_auth");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn export_wallet_account(client: &reqwest::Client, base_url: &str, request: ExportWalletAccountRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/export_wallet_account");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn init_import_wallet(client: &reqwest::Client, base_url: &str, request: InitImportWalletRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/init_import_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn import_wallet(client: &reqwest::Client, base_url: &str, request: ImportWalletRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/import_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn init_import_private_key(client: &reqwest::Client, base_url: &str, request: InitImportPrivateKeyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/init_import_private_key");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn import_private_key(client: &reqwest::Client, base_url: &str, request: ImportPrivateKeyRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/import_private_key");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn oauth(client: &reqwest::Client, base_url: &str, request: OauthRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/oauth");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn init_otp_auth(client: &reqwest::Client, base_url: &str, request: InitOtpAuthRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/init_otp_auth");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn otp_auth(client: &reqwest::Client, base_url: &str, request: OtpAuthRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/otp_auth");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn create_oauth_providers(client: &reqwest::Client, base_url: &str, request: CreateOauthProvidersRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/create_oauth_providers");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_oauth_providers(client: &reqwest::Client, base_url: &str, request: DeleteOauthProvidersRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_oauth_providers");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn get_organization_configs(client: &reqwest::Client, base_url: &str, request: GetOrganizationConfigsRequest, stamp: &str) -> Result<GetOrganizationConfigsResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/query/get_organization_configs");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<GetOrganizationConfigsResponse>().await?;
    Ok(parsed)
}
pub async fn delete_private_keys(client: &reqwest::Client, base_url: &str, request: DeletePrivateKeysRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_private_keys");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn update_wallet(client: &reqwest::Client, base_url: &str, request: UpdateWalletRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/update_wallet");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_wallets(client: &reqwest::Client, base_url: &str, request: DeleteWalletsRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_wallets");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}
pub async fn delete_sub_organization(client: &reqwest::Client, base_url: &str, request: DeleteSubOrganizationRequest, stamp: &str) -> Result<ActivityResponse, reqwest::Error> {
    let url = format!("{}{}", base_url, "/public/v1/submit/delete_sub_organization");
    let res = client
        .post(url)
        .header("X-Stamp", stamp)
        .json(&request)
        .send()
        .await?;
    let parsed = res.json::<ActivityResponse>().await?;
    Ok(parsed)
}

}
